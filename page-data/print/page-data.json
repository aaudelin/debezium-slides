{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"b90762c2-b257-5b38-b31b-72a3f5e8e9e4","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Kotlin \\u2764\\uFE0F Debezium\")), mdx(\"h1\", null, \"Kotlin \\u2764\\uFE0F Debezium\"), mdx(\"h1\", null, \"Un joyeux m\\xE9lange !\"), mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(\"img\", {\n    style: {\n      \"marginRight\": \"2em\"\n    },\n    src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Kotlin-logo.svg/800px-Kotlin-logo.svg.png\",\n    width: \"100\"\n  }), mdx(\"img\", {\n    style: {\n      \"marginLeft\": \"2em\"\n    },\n    src: \"https://avatars3.githubusercontent.com/u/11964329?s=400&v=4\",\n    width: \"100\"\n  })), mdx(\"hr\", null), mdx(\"h1\", null, \"L'instant promo\"), mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(\"img\", {\n    src: \"https://upload.wikimedia.org/wikipedia/fr/c/c8/Twitter_Bird.svg\",\n    width: \"100\"\n  }), mdx(\"p\", null, \"@AurelienAudelin\")), mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(\"img\", {\n    src: \"https://www.solutions-numeriques.com/wp-content/uploads/2015/01/linkedin-1424358279.png\",\n    width: \"100\"\n  }), mdx(\"p\", null, \"github.com/aaudelin\")), mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(\"img\", {\n    src: \"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\",\n    width: \"100\"\n  }), mdx(\"p\", null, \"linkedin.com/in/aaudelin/\")), mdx(\"hr\", null), mdx(\"h1\", null, \"On commence quand ?\"), mdx(\"img\", {\n    src: \"https://media1.giphy.com/media/tXL4FHPSnVJ0A/giphy.gif\",\n    width: \"500\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Maintenant\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h4\", null, \"Le CDC avec Debezium & Spring\"), mdx(\"h4\", null, \"Le besoin et la mise en place\"), mdx(\"h4\", null, \"Et avec tout \\xE7a, \\xE7a donne quoi ?\")), mdx(\"hr\", null), mdx(\"h1\", null, \"C\"), mdx(\"h1\", null, \"D\"), mdx(\"h1\", null, \"C\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Change\"), mdx(\"h1\", null, \"D\"), mdx(\"h1\", null, \"C\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Change\"), mdx(\"h1\", null, \"Data\"), mdx(\"h1\", null, \"C\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Change\"), mdx(\"h1\", null, \"Data\"), mdx(\"h1\", null, \"Capture\"), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CTurn your database into stream events\\u201D\")), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"img\", {\n    src: \"https://media1.giphy.com/media/UO5elnTqo4vSg/giphy.gif\",\n    width: \"30%\"\n  })), mdx(\"hr\", null), mdx(\"p\", null, \"Modification BDD (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Update, Insert, Delete\"), \" )\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"img\", {\n    src: \"https://github.com/aaudelin/debezium-slides/blob/master/images/vertical-stream-pipe.png?raw=true\",\n    width: \"8%\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"{Event Debezium}\"))), mdx(\"hr\", null), mdx(\"h4\", null, mdx(\"em\", {\n    parentName: \"h4\"\n  }, \"{Event Debezium}\"), \"  \", \"\\u2192\", \" SourceRecord\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Topic\"), mdx(\"li\", null, \"Operation\"), mdx(\"li\", null, \"Payload\"))), mdx(\"hr\", null), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"div\", null, \"Mod\\xE8le de donn\\xE9es source\"), mdx(\"img\", {\n    src: \"https://cdn4.iconfinder.com/data/icons/computers-3/32/574-01-512.png\",\n    width: \"10%\"\n  }), mdx(\"img\", {\n    src: \"https://www.freeiconspng.com/uploads/gears-icon-png-3-gear--31.png\",\n    width: \"15%\"\n  }), mdx(\"img\", {\n    src: \"https://cdn4.iconfinder.com/data/icons/computers-3/32/574-01-512.png\",\n    width: \"10%\"\n  }), mdx(\"div\", null, \"Mod\\xE8le de donn\\xE9es cible\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://debezium.io/images/debezium-architecture.png\",\n    width: \"100%\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Le r\\xEAve des devs ...\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/3oEduU2JjgQUGKyNvG/giphy.gif\",\n    width: \"30%\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"... un cauchemar pour les ops !\"), mdx(\"img\", {\n    src: \"https://media0.giphy.com/media/3x879tF9M0gcU/giphy.gif\",\n    width: \"30%\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Embarqu\\xE9 dans Spring Boot \\uD83D\\uDE80\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Serveur Tomcat embarqu\\xE9\"), mdx(\"li\", null, \"Auto-configuration\"), mdx(\"li\", null, \"Metrics\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: vsDark,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<dependency>\\n  <groupId>io.debezium</groupId>\\n  <artifactId>\\n    \\n  </artifactId>\\n  <version>${debezium.version}</version>\\n</dependency>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<dependency>\\n  <groupId>io.debezium</groupId>\\n  <artifactId>\\n    debezium-embedded\\n  </artifactId>\\n  <version>${debezium.version}</version>\\n</dependency>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<dependency>\\n  <groupId>io.debezium</groupId>\\n  <artifactId>\\n    debezium-connector-postgres\\n  </artifactId>\\n  <version>${debezium.version}</version>\\n</dependency>\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"On veut du Kotlin !\"), mdx(\"img\", {\n    src: \"https://media0.giphy.com/media/JzOyy8vKMCwvK/giphy.gif\",\n    width: \"30%\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: vsDark,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Configuration Debezium\\\"\",\n    \"title\": \"\\\"Configuration\",\n    \"Debezium\\\"\": true\n  }), \"@Configuration\\nclass CdcDebeziumConfiguration {\\n    @Bean\\n    fun debeziumConfiguration(cdcConfig: CdcDbzConfigurationProperties): InnerDebeziumConfiguration {\\n        return InnerDebeziumConfiguration.empty().withSystemProperties(Function.identity()).edit()\\n                .with(EmbeddedEngine.CONNECTOR_CLASS, \\\"io.debezium.connector.postgresql.PostgresConnector\\\")\\n                .with(EmbeddedEngine.ENGINE_NAME, APP_NAME)\\n                .with(EmbeddedEngine.OFFSET_STORAGE, \\\"org.apache.kafka.connect.storage.FileOffsetBackingStore\\\")\\n                .with(EmbeddedEngine.OFFSET_STORAGE_FILE_FILENAME, cdcConfig.offsetStorageFileName)\\n                .with(EmbeddedEngine.OFFSET_FLUSH_INTERVAL_MS, cdcConfig.offsetStorageFlushIntervalMs)\\n\\n                .with(PostgresConnectorConfig.DATABASE_NAME, cdcConfig.sourceDatabaseName)\\n                .with(PostgresConnectorConfig.SERVER_NAME, cdcConfig.sourceDatabaseServerName)\\n                .with(PostgresConnectorConfig.HOSTNAME, cdcConfig.sourceDatabaseHost)\\n                .with(PostgresConnectorConfig.PORT, cdcConfig.sourceDatabasePort)\\n                .with(PostgresConnectorConfig.USER, cdcConfig.sourceDatabaseUser)\\n                .with(PostgresConnectorConfig.PASSWORD, cdcConfig.sourceDatabasePassword)\\n                .with(PostgresConnectorConfig.SCHEMA_WHITELIST, cdcConfig.sourceDatabaseSchema)\\n                .with(PostgresConnectorConfig.TABLE_WHITELIST, cdcConfig.sourceWhitelistTables\\n                        .joinToString(\\\",\\\") { \\\"${cdcConfig.sourceDatabaseSchema}.$it\\\"})\\n\\n                .with(\\\"schemas.enable\\\", false)\\n                .build()\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:10 subtitle=\\\"Configuration connecteur\\\"\",\n    \"6:10\": true,\n    \"subtitle\": \"\\\"Configuration\",\n    \"connecteur\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:20 subtitle=\\\"Configuration BDD source\\\"\",\n    \"12:20\": true,\n    \"subtitle\": \"\\\"Configuration\",\n    \"BDD\": true,\n    \"source\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: vsDark,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Moteur Debezium\\\"\",\n    \"title\": \"\\\"Moteur\",\n    \"Debezium\\\"\": true\n  }), \"@Component\\nclass EmbeddedDebeziumEngine (debeziumConfiguration: CdcDebeziumConfiguration) {\\n    init {\\n        val embeddedEngine = EmbeddedEngine.create()\\n                .using(debeziumConfiguration)\\n                .notifying(consumer)\\n                .build()\\n\\n        val executor = Executors.newSingleThreadExecutor()\\n        executor.execute(embeddedEngine)\\n\\n        this.executor = executor\\n        this.engine = engine\\n    }\\n\\n    @PreDestroy\\n    fun close() {\\n        this.engine.stop()\\n        this.executor.shutdown()\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:7 subtitle=\\\"Créer moteur Debezium\\\"\",\n    \"4:7\": true,\n    \"subtitle\": \"\\\"Créer\",\n    \"moteur\": true,\n    \"Debezium\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[31:78],5[24:45] subtitle=\\\"Injecter Configuration Debezium\\\"\",\n    \"2[31:78],5[24:45]\": true,\n    \"subtitle\": \"\\\"Injecter\",\n    \"Configuration\": true,\n    \"Debezium\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:10 subtitle=\\\"Lancement du moteur\\\"\",\n    \"9:10\": true,\n    \"subtitle\": \"\\\"Lancement\",\n    \"du\": true,\n    \"moteur\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:20 subtitle=\\\"Arrêter le moteur\\\"\",\n    \"16:20\": true,\n    \"subtitle\": \"\\\"Arrêter\",\n    \"le\": true,\n    \"moteur\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6 subtitle=\\\"Consumer\\\"\",\n    \"subtitle\": \"\\\"Consumer\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: vsDark,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Consumer unitaire\\\"\",\n    \"title\": \"\\\"Consumer\",\n    \"unitaire\\\"\": true\n  }), \"@Component\\nclass DebeziumSourceRecordConsumer : Consumer<SourceRecord> {\\n  \\n  override fun accept(record: SourceRecord) {\\n\\n    val topic = record.topic().substring(record.topic().lastIndexOf(\\\".\\\") + 1)\\n\\n    val operation = transformedRecord.headers()\\n            .allWithName(ExtractNewRecordStateConfigDefinition.DEBEZIUM_OPERATION_HEADER_KEY).next()\\n            .value() as String\\n\\n    val payload = String(valueConverter.fromConnectData(\\n            record.topic(),\\n            transformedRecord.valueSchema()))\\n\\n    val entiteSink = processor.process(payload)\\n\\n    jdbcTemplate.upsert(entiteSink)\\n\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[38:59],4 subtitle=\\\"Consumer java\\\"\",\n    \"2[38:59],4\": true,\n    \"subtitle\": \"\\\"Consumer\",\n    \"java\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6 subtitle=\\\"Topic table source\\\"\",\n    \"subtitle\": \"\\\"Topic\",\n    \"table\": true,\n    \"source\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:10 subtitle=\\\"Operation READ, CREATE, UPDATE, DELETE\\\"\",\n    \"8:10\": true,\n    \"subtitle\": \"\\\"Operation\",\n    \"READ,\": true,\n    \"CREATE,\": true,\n    \"UPDATE,\": true,\n    \"DELETE\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:15 subtitle=\\\"Payload du tuple\\\"\",\n    \"12:15\": true,\n    \"subtitle\": \"\\\"Payload\",\n    \"du\": true,\n    \"tuple\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:18 subtitle=\\\"Transformation et enregistrement du record\\\"\",\n    \"16:18\": true,\n    \"subtitle\": \"\\\"Transformation\",\n    \"et\": true,\n    \"enregistrement\": true,\n    \"du\": true,\n    \"record\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Mod\\xE8le 'sink' structur\\xE9\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"S\\xE9quentiel\"), mdx(\"li\", null, \"Mono-thread\\xE9\"), mdx(\"li\", null, \"Insertion unitaire\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Performances\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"h2\", null, \"68 entit\\xE9s par seconde\"), mdx(\"h2\", null, \"5 362 123 import initial\")), mdx(\"hr\", null), mdx(\"h1\", null, \"27 Heures d'import initial\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Traitement par batch\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/d3mlE7uhX8KFgEmY/giphy.gif\",\n    width: \"30%\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"Traitement par batch\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Batch d'entit\\xE9s debezium\"), mdx(\"li\", null, \"Mono-thread\\xE9\"), mdx(\"li\", null, \"Batch update\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Traitement par batch\"), mdx(\"ul\", null, mdx(\"li\", {\n    style: {\n      color: 'tomato'\n    }\n  }, \"Batch d'entit\\xE9s debezium\"), mdx(\"li\", null, \"Mono-thread\\xE9\"), mdx(\"li\", {\n    style: {\n      color: 'tomato'\n    }\n  }, \"Batch update\")), mdx(\"hr\", null), mdx(Horizontal, {\n    mdxType: \"Horizontal\"\n  }, mdx(\"h3\", null, \"27 heures\"), mdx(\"ul\", {\n    style: {\n      \"textAlign\": \"left\",\n      \"width\": \"150%\",\n      \"marginLeft\": \"2em\",\n      \"fontSize\": \"0.8em\"\n    }\n  }, mdx(\"li\", {\n    style: {\n      color: 'indigo'\n    }\n  }, \"S\\xE9quentiel\"), mdx(\"li\", null, \"Mono-thread\\xE9\"), mdx(\"li\", {\n    style: {\n      color: 'steelblue'\n    }\n  }, \"Insertion unitaire\"))), mdx(Horizontal, {\n    mdxType: \"Horizontal\"\n  }, mdx(\"h3\", null, \"4 heures\"), mdx(\"ul\", {\n    style: {\n      \"textAlign\": \"left\",\n      \"width\": \"150%\",\n      \"marginLeft\": \"2em\",\n      \"fontSize\": \"0.8em\"\n    }\n  }, mdx(\"li\", {\n    style: {\n      color: 'indigo'\n    }\n  }, \"Batch d'entit\\xE9s debezium\"), mdx(\"li\", null, \"Mono-thread\\xE9\"), mdx(\"li\", {\n    style: {\n      color: 'steelblue'\n    }\n  }, \"Batch update\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: vsDark,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-kotlin\",\n    \"metastring\": \"title=\\\"Consumer par batch\\\"\",\n    \"title\": \"\\\"Consumer\",\n    \"par\": true,\n    \"batch\\\"\": true\n  }), \"@Component\\nclass DebeziumSourceRecordConsumer : EmbeddedEngine.ChangeConsumer {\\n\\n  override fun handleBatch(listRecords: MutableList<SourceRecord>, committer: EmbeddedEngine.RecordCommitter) {\\n        listRecords.forEach { accept(it, committer) }\\n\\n        batchUpdate(listRecords)\\n\\n        committer.markBatchFinished()\\n    }\\n  \\n  fun accept(record: SourceRecord, committer: EmbeddedEngine.RecordCommitter) {\\n\\n    val topic = record.topic().substring(record.topic().lastIndexOf(\\\".\\\") + 1)\\n\\n    val operation = transformedRecord.headers()\\n            .allWithName(ExtractNewRecordStateConfigDefinition.DEBEZIUM_OPERATION_HEADER_KEY).next()\\n            .value() as String\\n\\n    val payload = String(valueConverter.fromConnectData(\\n            record.topic(),\\n            transformedRecord.valueSchema(), \\n            transformedRecord.value()))\\n\\n    val entiteSink = processor.process(payload)\\n\\n    committer.markProcessed(record)\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[38:67],4 subtitle=\\\"Consumer debezium\\\"\",\n    \"2[38:67],4\": true,\n    \"subtitle\": \"\\\"Consumer\",\n    \"debezium\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5,12 subtitle=\\\"Traitement des records\\\"\",\n    \"5,12\": true,\n    \"subtitle\": \"\\\"Traitement\",\n    \"des\": true,\n    \"records\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14:24 subtitle=\\\"Topic, Operation, Payload\\\"\",\n    \"14:24\": true,\n    \"subtitle\": \"\\\"Topic,\",\n    \"Operation,\": true,\n    \"Payload\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"25\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"25 subtitle=\\\"Transformation du record\\\"\",\n    \"subtitle\": \"\\\"Transformation\",\n    \"du\": true,\n    \"record\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"27\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"27 subtitle=\\\"Offset du record\\\"\",\n    \"subtitle\": \"\\\"Offset\",\n    \"du\": true,\n    \"record\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 subtitle=\\\"Update BDD\\\"\",\n    \"subtitle\": \"\\\"Update\",\n    \"BDD\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"9 subtitle=\\\"Offset du batch\\\"\",\n    \"subtitle\": \"\\\"Offset\",\n    \"du\": true,\n    \"batch\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Demo time !\"), mdx(\"img\", {\n    src: \"https://media3.giphy.com/media/2n8480RCQ2jBe/giphy.gif\",\n    width: \"40%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://github.com/aaudelin/debezium-slides/blob/master/images/structureh1.png?raw=true\",\n    width: \"40%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://github.com/aaudelin/debezium-slides/blob/master/images/structureh2.png?raw=true\",\n    width: \"100%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://github.com/aaudelin/debezium-slides/blob/master/images/structureh3.png?raw=true\",\n    width: \"100%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: \"https://github.com/aaudelin/debezium-slides/blob/master/images/structureh4.png?raw=true\",\n    width: \"100%\"\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"En synth\\xE8se\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Simple et pratique\"), mdx(\"li\", null, \"Performances et contraintes\"), mdx(\"li\", null, \"Solution batch et concurrence\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Autres solutions\"), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Maxwell\"), mdx(\"li\", null, \"SpinalTap\"), mdx(\"li\", null, \"Yelp\\u2019s MySQL Streamer\"), mdx(\"li\", null, \"DBLog\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Questions ?\"), mdx(\"img\", {\n    src: \"https://media0.giphy.com/media/3ohzdRoOp1FUYbtGDu/giphy.gif\",\n    width: \"50%\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b90762c2-b257-5b38-b31b-72a3f5e8e9e4","slug":"","title":"Kotlin ❤️ Debezium"}}}